/** FastAPI No description provided (generated by Openapi Generator
  * https://github.com/openapitools/openapi-generator)
  *
  * The version of the OpenAPI document: 0.1.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package org.openapitools.client.api

import org.openapitools.client.model.AddEmbedding
import org.openapitools.client.model.CreateCollection
import org.openapitools.client.model.CreateDatabase
import org.openapitools.client.model.CreateTenant
import org.openapitools.client.model.DeleteEmbedding
import org.openapitools.client.model.GetEmbedding
import org.openapitools.client.model.HTTPValidationError
import org.openapitools.client.model.QueryEmbedding
import org.openapitools.client.model.UpdateCollection
import org.openapitools.client.model.UpdateEmbedding
import org.json4s.JValue
import org.openapitools.client.core.JsonSupport._
import sttp.client4._
import sttp.model.Method

object DefaultApi {
  def apply(baseUrl: String = "http://localhost") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /** Expected answers: code 201 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param addEmbedding
    */
  def add(
      collectionId: String,
      addEmbedding: AddEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/add")
      .contentType("application/json")
      .body(addEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    */
  def count(
      collectionId: String
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/collections/${collectionId}/count")
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param tenant
    * @param database
    */
  def countCollections(
      tenant: Option[String] = None,
      database: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(
        Method.GET,
        uri"$baseUrl/api/v1/count_collections?tenant=${tenant}&database=${database}"
      )
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param createCollection
    * @param tenant
    * @param database
    */
  def createCollection(
      createCollection: CreateCollection,
      tenant: Option[String] = None,
      database: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections?tenant=${tenant}&database=${database}")
      .contentType("application/json")
      .body(createCollection)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param createDatabase
    * @param tenant
    */
  def createDatabase(
      createDatabase: CreateDatabase,
      tenant: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/databases?tenant=${tenant}")
      .contentType("application/json")
      .body(createDatabase)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param createTenant
    */
  def createTenant(
      createTenant: CreateTenant
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/tenants")
      .contentType("application/json")
      .body(createTenant)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param deleteEmbedding
    */
  def delete(
      collectionId: String,
      deleteEmbedding: DeleteEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/delete")
      .contentType("application/json")
      .body(deleteEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionName
    * @param tenant
    * @param database
    */
  def deleteCollection(
      collectionName: String,
      tenant: Option[String] = None,
      database: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(
        Method.DELETE,
        uri"$baseUrl/api/v1/collections/${collectionName}?tenant=${tenant}&database=${database}"
      )
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param getEmbedding
    */
  def get(
      collectionId: String,
      getEmbedding: GetEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/get")
      .contentType("application/json")
      .body(getEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionName
    * @param tenant
    * @param database
    */
  def getCollection(
      collectionName: String,
      tenant: Option[String] = None,
      database: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(
        Method.GET,
        uri"$baseUrl/api/v1/collections/${collectionName}?tenant=${tenant}&database=${database}"
      )
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param database
    * @param tenant
    */
  def getDatabase(
      database: String,
      tenant: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/databases/${database}?tenant=${tenant}")
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param queryEmbedding
    */
  def getNearestNeighbors(
      collectionId: String,
      queryEmbedding: QueryEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/query")
      .contentType("application/json")
      .body(queryEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param tenant
    */
  def getTenant(
      tenant: String
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/tenants/${tenant}")
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : Map[String, Int] (Successful Response)
    */
  def heartbeat(): Request[Either[ResponseException[String, Exception], Map[String, Int]]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/heartbeat")
      .contentType("application/json")
      .response(asJson[Map[String, Int]])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param limit
    * @param offset
    * @param tenant
    * @param database
    */
  def listCollections(
      limit: Option[Int] = None,
      offset: Option[Int] = None,
      tenant: Option[String] = None,
      database: Option[String] = None
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(
        Method.GET,
        uri"$baseUrl/api/v1/collections?limit=${limit}&offset=${offset}&tenant=${tenant}&database=${database}"
      )
      .contentType("application/json")
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : Any (Successful Response)
    */
  def preFlightChecks(): Request[Either[ResponseException[String, Exception], Any]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/pre-flight-checks")
      .contentType("application/json")
      .response(asJson[Any])

  /** Expected answers: code 200 : Boolean (Successful Response)
    */
  def reset(): Request[Either[ResponseException[String, Exception], Boolean]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/reset")
      .contentType("application/json")
      .response(asJson[Boolean])

  /** Expected answers: code 200 : Map[String, Int] (Successful Response)
    */
  def root(): Request[Either[ResponseException[String, Exception], Map[String, Int]]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1")
      .contentType("application/json")
      .response(asJson[Map[String, Int]])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param updateEmbedding
    */
  def update(
      collectionId: String,
      updateEmbedding: UpdateEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/update")
      .contentType("application/json")
      .body(updateEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param updateCollection
    */
  def updateCollection(
      collectionId: String,
      updateCollection: UpdateCollection
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v1/collections/${collectionId}")
      .contentType("application/json")
      .body(updateCollection)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : org.json4s.JValue (Successful Response) code 422 :
    * HTTPValidationError (Validation Error)
    *
    * @param collectionId
    * @param addEmbedding
    */
  def upsert(
      collectionId: String,
      addEmbedding: AddEmbedding
  ): Request[Either[ResponseException[String, Exception], org.json4s.JValue]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v1/collections/${collectionId}/upsert")
      .contentType("application/json")
      .body(addEmbedding)
      .response(asJson[org.json4s.JValue])

  /** Expected answers: code 200 : String (Successful Response)
    */
  def version(): Request[Either[ResponseException[String, Exception], String]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v1/version")
      .contentType("application/json")
      .response(asJson[String])

}
